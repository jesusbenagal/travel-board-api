generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

enum MemberStatus {
  INVITED
  ACCEPTED
  DECLINED
}

enum Visibility {
  PRIVATE
  LINK
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ItemType {
  PLACE
  NOTE
  LODGING
  TRANSPORT
  ACTIVITY
  LINK
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String
  name         String?
  avatarUrl    String?

  tripsOwned   Trip[]       @relation("TripsOwned")
  memberships  TripMember[]
  invitesSent  Invite[]     @relation("InvitesByUser")
  itemsCreated Item[]       @relation("ItemsByUser")
  votes        ItemVote[]
  ShareLink    ShareLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id      String @id @default(cuid())
  ownerId String
  owner   User   @relation("TripsOwned", fields: [ownerId], references: [id])

  title       String     @db.VarChar(140)
  description String?
  startDate   DateTime
  endDate     DateTime
  timezone    String
  visibility  Visibility @default(PRIVATE)

  members   TripMember[]
  invites   Invite[]
  items     Item[]
  ShareLink ShareLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model TripMember {
  id     String       @id @default(cuid())
  tripId String
  userId String
  role   Role
  status MemberStatus

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([tripId, userId])
  @@index([userId])
}

model Invite {
  id          String @id @default(cuid())
  tripId      String
  trip        Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invitedById String
  invitedBy   User   @relation("InvitesByUser", fields: [invitedById], references: [id])

  email  String
  role   Role
  status InviteStatus @default(PENDING)

  token       String    @unique
  expiresAt   DateTime
  respondedAt DateTime?

  createdAt DateTime @default(now())

  @@unique([tripId, email])
  @@index([email])
}

model Item {
  id     String @id @default(cuid())
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdById String
  createdBy   User   @relation("ItemsByUser", fields: [createdById], references: [id])

  type  ItemType
  title String   @db.VarChar(140)
  notes String?

  startAt  DateTime?
  endAt    DateTime?
  timezone String

  locationName String?
  lat          Decimal?
  lng          Decimal?

  url       String?
  costCents Int?
  currency  String? @db.Char(3)

  order Int @default(0)

  votes ItemVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripId, startAt])
  @@index([createdById])
}

model ItemVote {
  id     String @id @default(cuid())
  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([itemId, userId])
  @@index([userId])
}

model ShareLink {
  id     String @id @default(cuid())
  tripId String @map("trip_id")
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)

  createdById String @map("created_by_id")
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  slug      String    @unique
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  maxUses   Int?
  uses      Int       @default(0)
  revokedAt DateTime?
  note      String?   @db.VarChar(140)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripId, isActive])
}
